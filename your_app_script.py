import streamlit as st
import openai
import pptx
from pptx.util import Inches, Pt
import os
from dotenv import load_dotenv

load_dotenv()

# Initialize the OpenAI client
openai.api_key = os.getenv('OPENAI_API_KEY')

TITLE_FONT_SIZE = Pt(30)
SLIDE_FONT_SIZE = Pt(16)

# Rest of your script...



def generate_slide_titles(topic):
    # Generate a prompt for OpenAI based on the topic
    prompt = f"Create content for 5 slide titles about {topic}. Include key points and details."

    # Use OpenAI API to get a response
    response = openai.Completion.create(
        engine="text-davinci-003",  # Choose the appropriate engine
        prompt=prompt,
        max_tokens=200,  # Adjust as needed
    )

    return response['choices'][0]['text'].split("\n")



def generate_slide_content(slide_title):
    # Generate a prompt for OpenAI based on the topic
    prompt = f"Create content for the slide: '{slide_title}'."

    # Use OpenAI API to get a response
    response = openai.Completion.create(
        engine="text-davinci-003",  # Choose the appropriate engine
        prompt=prompt,
        max_tokens=500,  # Adjust as needed
    )

    

    return response['choices'][0]['text'].split("\n")


def create_presentation(topic, slide_titles, slide_contents):
    # Create a PowerPoint presentation
    presentation = pptx.Presentation()

    # Add a title slide
    title_slide_layout = presentation.slide_layouts[0]
    title_slide = presentation.slides.add_slide(title_slide_layout)
    title = title_slide.shapes.title
    subtitle = title_slide.placeholders[1]

    title.text = f"{topic} Presentation"
    subtitle.text = "Automatically generated by OpenAI and Streamlit"

    # Add content slides
    for slide_title, slide_content in zip(slide_titles, slide_contents):
        content_slide_layout = presentation.slide_layouts[1]  # Choose the appropriate layout
        content_slide = presentation.slides.add_slide(content_slide_layout)
        title = content_slide.shapes.title
        content = content_slide.placeholders[1]

        title.text = slide_title
        content.text = slide_content

    # Save the presentation
    presentation.save(f"{topic}_presentation.pptx")

def main():
    # Assume 'topic' is obtained from user input in the Streamlit app
    topic = st.text_input("Enter topic for slide:")

    if st.button("Generate Slide"):
        # Generate slide titles and contents
        slide_titles = generate_slide_titles(topic)
        slide_contents = generate_slide_contents(topic)

        # Filter out any empty titles or contents
        filtered_slide_titles = [title for title in slide_titles if title.strip()]
        filtered_slide_contents = [content for content in slide_contents if content.strip()]

        # Display generated titles and contents
        st.info("Generated Slide Titles:")
        st.write(filtered_slide_titles)
        st.info("Generated Slide Contents:")
        st.write(filtered_slide_contents)

        # Create and save the presentation
        create_presentation(topic, filtered_slide_titles, filtered_slide_contents)
        st.success("Presentation successfully generated!")

        # Provide a link to download the presentation
        st.markdown(f"### [Download Presentation](sandbox:/content/{topic}_presentation.pptx)")

if __name__ == "__main__":
    main()





